# docker-compose.yml
# Required environment variables:
# TARGET - The target environment to build the frontend for
#   (development, production)

version: '0.0.1'

services:
  certbot:
    container_name: stagehunter-certbot
    image: certbot/certbot:v3.0.1
    volumes:
      - ./certbot/conf:/etc/letsencrypt:rw
      - ./certbot/www:/var/www/certbot:rw
    depends_on:
      nginx:
        condition: service_started

  nginx:
    container_name: stagehunter-nginx
    image: nginx:1.27.2
    ports:
      - 80:80
      - 443:443
    networks:
      - frontend-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    restart: unless-stopped
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy

  frontend:
    container_name: stagehunter-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    ports:
      - 3000:3000
    volumes:
      - ./frontend:/app
      - /app/.next
      - /app/node_modules
    networks:
      - frontend-network
    environment:
      - NODE_OPTIONS=${NODE_OPTIONS}
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/status"]
      interval: 1m
      timeout: 15s
      retries: 4
      start_period: 10m
      start_interval: 5s

  backend:
    container_name: stagehunter-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    env_file:
      - ./backend/.env
    networks:
      - frontend-network
      - backend-network
    volumes:
      - ./backend/.pgpass:/root/.pgpass
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/daily"]
      interval: 1m
      timeout: 15s
      retries: 4
      start_period: 10m
      start_interval: 5s

  db:
    container_name: stagehunter-db
    build:
      context: ./db
      dockerfile: Dockerfile
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/pg_password
    restart: unless-stopped
    networks:
      - backend-network
    volumes:
      - pgdata:/var/lib/postgresql/data
    secrets:
      - pg_password
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "go_prog_user", "-d", "stagehunter"]
      interval: 1m
      timeout: 15s
      retries: 4
      start_period: 10m
      start_interval: 5s

volumes:
  pgdata:

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge

secrets:
  pg_password:
    file: ./db/.pg_password
