name: Deploy Dev Version to AWS server on Push

on:
  push:
    branches: ['dev']

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify secrets
        run: |
          echo "${{ vars.AWS_HOST }}"
          echo "${{ vars.AWS_USER }}"
          echo "${{ secrets.AWS_PVT_KEY }}"

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ vars.AWS_HOST }}
          username: ${{ vars.AWS_USER }}
          key: ${{ secrets.AWS_PVT_KEY }}
          script: |
            # Remove any existing clone and clone fresh
            rm -rf StageHunter && \
              git clone -b dev git@github.com:michaelbennett99/StageHunter.git && \
              cd StageHunter

            # Download SQL dump directly on EC2, unzip and put it where it's
            # expected to be by the db container
            aws s3 cp ${{ vars.S3_SQL_DUMP_PATH }} ./db/dump.sql.gz && \
              gunzip ./db/dump.sql.gz

            # # Marshal environment variables and create secret files
            # # For frontend
            touch ./frontend/.env
            echo "NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=${{ secrets.MAPBOX_ACCESS_TOKEN }}" >> ./frontend/.env

            # For backend
            touch ./backend/.env
            echo "DATABASE_URL=${{ vars.DATABASE_URL }}" >> ./backend/.env
            touch ./backend/.pgpass
            echo "${{ secrets.PGPASS }}" >> ./backend/.pgpass

            # For db
            echo "${{ secrets.PG_PASSWORD }}" > ./db/.pg_password

            # # Build
            # docker compose \
            #   -f docker-compose.yml \
            #   -f docker-compose.staging.yml \
            #   build

            # # Deploy
            # docker compose \
            #   -f docker-compose.yml \
            #   -f docker-compose.staging.yml \
            #   up -d \
            #   -e NODE_OPTIONS=${{ vars.NODE_OPTIONS }}
